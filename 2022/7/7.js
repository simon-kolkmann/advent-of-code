import path from 'path'

import { getPuzzleInputWithoutEmptyLastLine } from '#root/util/index.js'

const input = getPuzzleInputWithoutEmptyLastLine(import.meta)

const tree = {
	type: 'd'
}

let currentPath = ''

const getFileOrDirectory = path => {
	if (path === '/') {
		return tree
	}

	return path
		.slice(1) // Remove leading path separator
		.split('/')
		.reduce((node, segment) => node?.[segment], tree)
}

const addFile = (pathToParent, { name, size }) => {
	const parent = getFileOrDirectory(pathToParent)
	parent[name] = { type: 'f', size: Number(size) }
}

const addDirectory = (pathToParent, { name }) => {
	const parent = getFileOrDirectory(pathToParent)
	parent[name] = { type: 'd' }
}

const calculateDirectorySize = pathToDirectory => {
	const directory = getFileOrDirectory(pathToDirectory)

	return Object.entries(directory).reduce((size, [name, fileOrDirectory]) => {
		if (name === 'type') {
			return size
		}

		if (fileOrDirectory.type === 'f') {
			return size + fileOrDirectory.size
		} else {
			return size + calculateDirectorySize(path.join(pathToDirectory, name))
		}
	}, 0)
}

const findDirectoriesIn = pathToDirectory => {
	let result = []
	const directory = getFileOrDirectory(pathToDirectory)

	for (const [name, fileOrDirectory] of Object.entries(directory)) {
		if (fileOrDirectory.type === 'd') {
			const found = path.join(pathToDirectory, name)
			result = [...result, found, ...findDirectoriesIn(found)]
		}
	}

	return result
}

const findAllDirectories = () => {
	return ['/', ...findDirectoriesIn('/')]
}

for (const line of input) {
	if (line.startsWith('$ ')) {
		const [cmd, arg] = line
			.slice(2) // Remove '$ '
			.split(' ')

		if (cmd === 'cd') {
			currentPath = path.join(currentPath, arg)
		}
	} else {
		// We can assume that every line of output was generated by ls
		const [dirOrSize, name] = line.split(' ')
		const fullPath = path.join(currentPath, name)

		if (dirOrSize === 'dir') {
			if (!getFileOrDirectory(fullPath)) {
				addDirectory(currentPath, { name })
			}
		} else {
			addFile(currentPath, { name, size: dirOrSize })
		}
	}
}

const solutionPartOne = findAllDirectories()
	.map(path => calculateDirectorySize(path))
	.filter(size => size <= 100000)
	.reduce((total, size) => total + size, 0)

console.log(`Solution of Part I: ${solutionPartOne}`)

// Part II

const totalSpace = 70000000
const used = calculateDirectorySize('/')
const available = totalSpace - used
const needed = 30000000 - available

const solutionPartTwo = findAllDirectories()
	.map(path => calculateDirectorySize(path))
	.filter(size => size >= needed)
	.sort((a, b) => b - a)
	.pop()

console.log(`Solution of Part II: ${solutionPartTwo}`)
